/*
 * Generated by erpcgen 1.7.1 on Mon Mar 18 14:01:48 2019.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#if !defined(_erpc_psa_api_server_h_)
#define _erpc_psa_api_server_h_

#ifdef __cplusplus
#include "erpc_server.h"
#include "erpc_codec.h"
extern "C"
{
#include "erpc_psa_api.h"
#include <stdint.h>
#include <stdbool.h>
}

#if 10701 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif


/*!
 * @brief Service subclass for MatrixMultiplyService.
 */
class MatrixMultiplyService_service : public erpc::Service
{
public:
    MatrixMultiplyService_service() : Service(kMatrixMultiplyService_service_id) {}

    /*! @brief Call the correct server shim based on method unique ID. */
    virtual erpc_status_t handleInvocation(uint32_t methodId, uint32_t sequence, erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory);

private:
    /*! @brief Server shim for erpcMatrixMultiply of MatrixMultiplyService interface. */
    erpc_status_t erpcMatrixMultiply_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
};

/*!
 * @brief Service subclass for PsaFrameworkVersionService.
 */
class PsaFrameworkVersionService_service : public erpc::Service
{
public:
    PsaFrameworkVersionService_service() : Service(kPsaFrameworkVersionService_service_id) {}

    /*! @brief Call the correct server shim based on method unique ID. */
    virtual erpc_status_t handleInvocation(uint32_t methodId, uint32_t sequence, erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory);

private:
    /*! @brief Server shim for psa_framework_version of PsaFrameworkVersionService interface. */
    erpc_status_t psa_framework_version_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
};

/*!
 * @brief Service subclass for PsaVersionService.
 */
class PsaVersionService_service : public erpc::Service
{
public:
    PsaVersionService_service() : Service(kPsaVersionService_service_id) {}

    /*! @brief Call the correct server shim based on method unique ID. */
    virtual erpc_status_t handleInvocation(uint32_t methodId, uint32_t sequence, erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory);

private:
    /*! @brief Server shim for psa_version of PsaVersionService interface. */
    erpc_status_t psa_version_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
};

/*!
 * @brief Service subclass for PsaConnectService.
 */
class PsaConnectService_service : public erpc::Service
{
public:
    PsaConnectService_service() : Service(kPsaConnectService_service_id) {}

    /*! @brief Call the correct server shim based on method unique ID. */
    virtual erpc_status_t handleInvocation(uint32_t methodId, uint32_t sequence, erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory);

private:
    /*! @brief Server shim for psa_connect of PsaConnectService interface. */
    erpc_status_t psa_connect_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
};

/*!
 * @brief Service subclass for PsaCallService.
 */
class PsaCallService_service : public erpc::Service
{
public:
    PsaCallService_service() : Service(kPsaCallService_service_id) {}

    /*! @brief Call the correct server shim based on method unique ID. */
    virtual erpc_status_t handleInvocation(uint32_t methodId, uint32_t sequence, erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory);

private:
    /*! @brief Server shim for psa_call of PsaCallService interface. */
    erpc_status_t psa_call_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
};

/*!
 * @brief Service subclass for PsaCloseService.
 */
class PsaCloseService_service : public erpc::Service
{
public:
    PsaCloseService_service() : Service(kPsaCloseService_service_id) {}

    /*! @brief Call the correct server shim based on method unique ID. */
    virtual erpc_status_t handleInvocation(uint32_t methodId, uint32_t sequence, erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory);

private:
    /*! @brief Server shim for psa_close of PsaCloseService interface. */
    erpc_status_t psa_close_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
};

extern "C" {
#else
#include "erpc_psa_api.h"
#endif // __cplusplus

typedef void * erpc_service_t;

erpc_service_t create_MatrixMultiplyService_service(void);

erpc_service_t create_PsaFrameworkVersionService_service(void);

erpc_service_t create_PsaVersionService_service(void);

erpc_service_t create_PsaConnectService_service(void);

erpc_service_t create_PsaCallService_service(void);

erpc_service_t create_PsaCloseService_service(void);

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // _erpc_psa_api_server_h_
